#!/usr/bin/env python
# Adapted from : http://code.activestate.com/recipes/577358-pomodoro-timer/
from __future__ import print_function
from clize import run
from sigtools import modifiers
import sys
import time
import subprocess
from datetime import datetime
import os

try:
    from PyQt5.QtWidgets import QMessageBox
    from PyQt5.Qt import QApplication
except ImportError:
    has_qt = False
else:
    has_qt = True


this_dir = os.path.dirname(__file__)
ALARM = "{}/../../clock.mp3".format(this_dir)
DATA_FILENAME = os.path.expanduser("~/.pomodoro")
DEV_NULL = open(os.devnull, "w")


def notify(title, content, more=''):
    if not has_qt:
        return
    app = QApplication(sys.argv)
    msg = QMessageBox()
    msg.setIcon(QMessageBox.Information)
    msg.setText(content)
    msg.setWindowTitle(title)
    msg.setDetailedText(more)
    msg.show()
    app.exec_()


def tick(duration, display=False):
    """Sleep every minute until duration is 0

    Returns
    -------
    bool
        Whether it was interrupted or it ended the duration.

    """
    if duration <= 0:
        return False

    try:
        if display:
            print(f'{duration} \r', end='')
        time.sleep(60)
        return tick(duration-1, display)
    except KeyboardInterrupt:
        print("Interrupting")
        return True

def play_alarm(filename, volume=100):
    scale = 32768 * volume / 100
    cmd = ["mpg123", "-f", str(int(scale)), filename]
    try:
        p = subprocess.Popen(cmd, stdout=DEV_NULL, stderr=subprocess.PIPE)
        p.wait()
    except FileNotFoundError:
        pass


def write_pomo(start, stop, tag):
    duration = (stop - start).total_seconds() / 60.
    line = "{0},{1},{2},{3}\n".format(tag, start, stop, duration)
    if not os.path.exists(DATA_FILENAME):
        fd = open(DATA_FILENAME, "w")
        fd.write("work,start,end,duration\n")
    else:
        fd = open(DATA_FILENAME, "a")
    fd.write(line)
    fd.close()


@modifiers.kwoargs('repeat', 'alarm', 'notif', 'volume', 'display')
def main(work=60, rest=5, repeat=10, alarm=True, notif=False, volume=100,
         display=False):
    """
    work : int
        nb of minuntes of work

    rest : int
        nb of minutes of rest

    repeat : int
        nb of cycles work-rest to do

    alarm : bool
        whether to play an alarm each time a pomodoro is finished or started

    notif : bool
        whether to send a message box each time a pomodoro is finished or
        started

    volume : int
        percentage of volume for mpg123

    display : bool
        whether to show remaining time or not.

    """
    for _ in range(repeat):
        print("Work now")
        start = datetime.now()
        interrupted = tick(int(work), display)
        if interrupted:
            break
        stop = datetime.now()
        write_pomo(start, stop, "work")
        if alarm:
            play_alarm(ALARM, volume=volume)
        if notif:
            notify('pomodoro', 'Finished pomo, rest now.')
        print("Rest now")
        start = datetime.now()
        interrupted = tick(int(rest), display)
        if interrupted:
            break
        stop = datetime.now()
        write_pomo(start, stop, "rest")

        if alarm:
            play_alarm(ALARM, volume=volume)
        if notif:
            notify('pomodoro', 'Finished rest, work now.')
        print("Cycle complete")


if __name__ == "__main__":
    run(main)
